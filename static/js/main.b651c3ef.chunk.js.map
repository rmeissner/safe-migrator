{"version":3,"sources":["logic/onboard.ts","images/tx_details.png","logic/constants.ts","logic/migrate.ts","logic/status.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["userProvider","contractNetworks","56","multiSendAddress","safeMasterCopyAddress","safeProxyFactoryAddress","migrationAddress","migrationInterface","ethers","utils","Interface","serviceSdk","SafeServiceClient","buildSafeTxLink","safeAddress","safeTxHash","onboard","Onboard","networkId","subscriptions","wallet","provider","providers","Web3Provider","undefined","proposeTx","tx","callback","a","walletSelect","Error","walletCheck","signer","getSigner","getAddress","senderAddress","getSafeInfo","owners","indexOf","ethAdapter","EthersAdapter","Safe","create","safe","createTransaction","safeTransaction","getTransactionHash","signTransaction","proposeTransaction","migrate","to","value","data","encodeFunctionData","operation","revertMigration","loadSafeStatus","safeInfo","fixEnabled","masterCopy","toLowerCase","App","useState","setSafeAddress","txLink","setTxLink","safeStatus","setSafeStatus","showProgress","setShowProgress","migrationStatus","setMigrationStatus","handleMigrationButton","console","error","handleRevertButton","handleAddressInput","address","className","Typography","variant","maxWidth","padding","Link","href","src","txDetailsImg","alt","TextField","onChange","e","target","label","Container","sx","paddingTop","textAlign","display","flexDirection","alignItems","CircularProgress","Button","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b651c3ef.chunk.js","sourcesContent":["import Onboard from 'bnc-onboard';\nimport { ethers } from 'ethers';\n\nexport let userProvider: ethers.providers.Web3Provider | undefined\nexport  const onboard = Onboard({\n  networkId: 56,\n  subscriptions: {\n    wallet: wallet => {\n      if(wallet.provider)\n        userProvider = new ethers.providers.Web3Provider(wallet.provider)\n      else \n        userProvider = undefined\n    }\n  }\n});","export default __webpack_public_path__ + \"static/media/tx_details.1f4b7e73.png\";","import { ethers } from 'ethers';\nimport SafeServiceClient from '@gnosis.pm/safe-service-client';\n\nexport const contractNetworks = {\n    // bsc\n    56: {\n        multiSendAddress: '0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761',\n        safeMasterCopyAddress: '0x3E5c63644E683549055b9Be8653de26E0B4CD36E',\n        safeProxyFactoryAddress: '0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2'\n    },\n}\nexport const bscFixSingleton = \"0x4e6A0E034318Bec795c5E1dD4817A424767265A7\"\nexport const migrationAddress = \"0x82b71f39d719cC971B80E7A7B6c0c2aF96a5abC1\"\nexport const migrationInterface = new ethers.utils.Interface([\n    \"function migrate() public\",\n    \"function revertMigration() public\"\n])\nexport const rpcUrl = \"https://bsc-dataseed.binance.org/\"\nexport const serviceUrl = \"https://safe-transaction.bsc.gnosis.io/\"\nexport const serviceSdk = new SafeServiceClient(serviceUrl)\n\nexport const buildSafeTxLink = (safeAddress: string, safeTxHash: string): string => {\n    return `https://gnosis-safe.io/app/bnb:${safeAddress}/transactions/${safeTxHash}`\n}","import Safe, { EthersAdapter } from \"@gnosis.pm/safe-core-sdk\"\nimport { ethers } from 'ethers';\nimport { serviceSdk, contractNetworks, migrationAddress, migrationInterface } from \"./constants\"\nimport { onboard, userProvider } from \"./onboard\"\nimport { MetaTransactionData, StatusCallback } from \"./types\";\n\nconst proposeTx = async (safeAddress: string, tx: MetaTransactionData, callback?: StatusCallback): Promise<string> => {\n    callback?.(\"Connecting to wallet\")\n    if (!await onboard.walletSelect()) throw Error(\"Wallet selection canceled\")\n    if (!await onboard.walletCheck()) throw Error(\"Wallet cannot be used\")\n    const signer = userProvider?.getSigner()\n    if (!signer) throw Error(\"No Signer connected\")\n    const senderAddress = await signer.getAddress()\n    if (!senderAddress) throw Error(\"No Wallet connected\")\n    callback?.(\"Checking wallet status\")\n    const safeInfo = await serviceSdk.getSafeInfo(safeAddress)\n    if (safeInfo.owners.indexOf(senderAddress) < 0) throw Error(\"Use is not an owner\")\n    const ethAdapter = new EthersAdapter({\n        ethers,\n        signer\n    })\n    const safe = await Safe.create({ ethAdapter, safeAddress, contractNetworks })\n    const safeTransaction = await safe.createTransaction(tx)\n    const safeTxHash = await safe.getTransactionHash(safeTransaction)\n    callback?.(\"Please sign the transaction\")\n    await safe.signTransaction(safeTransaction)\n    callback?.(\"Waiting for service\")\n    await serviceSdk.proposeTransaction({\n        safeAddress,\n        senderAddress,\n        safeTransaction,\n        safeTxHash\n    })\n    callback?.(\"Transaction submitted to service\")\n    return safeTxHash\n}\n\nexport const migrate = async (safeAddress: string, callback?: StatusCallback): Promise<string> => {\n    return await proposeTx(\n        safeAddress,\n        {\n            to: migrationAddress,\n            value: \"0\",\n            data: migrationInterface.encodeFunctionData(\"migrate\"),\n            operation: 1\n        },\n        callback\n    )\n}\n\nexport const revertMigration = async (safeAddress: string, callback?: StatusCallback): Promise<string> => {\n    return await proposeTx(\n        safeAddress,\n        {\n            to: migrationAddress,\n            value: \"0\",\n            data: migrationInterface.encodeFunctionData(\"revertMigration\"),\n            operation: 1\n        },\n        callback\n    )\n}","import { serviceSdk, bscFixSingleton } from \"./constants\"\nimport { SafeStatus } from \"./types\";\n\nexport const loadSafeStatus = async (safeAddress: string): Promise<SafeStatus> => {\n    const safeInfo = await serviceSdk.getSafeInfo(safeAddress)\n    return {\n        fixEnabled: safeInfo.masterCopy.toLowerCase() === bscFixSingleton.toLowerCase()\n    }\n}","import { Button, CircularProgress, Container, Link, TextField, Typography } from '@mui/material';\nimport './App.css';\nimport txDetailsImg from './images/tx_details.png';\nimport { migrate, revertMigration } from './logic/migrate';\nimport { useState } from 'react';\nimport { SafeStatus } from './logic/types';\nimport { loadSafeStatus } from './logic/status';\nimport { buildSafeTxLink } from './logic/constants';\n\nfunction App() {\n\n  const [safeAddress, setSafeAddress] = useState(\"\")\n  const [txLink, setTxLink] = useState(\"\")\n  const [safeStatus, setSafeStatus] = useState<SafeStatus | undefined>(undefined)\n  const [showProgress, setShowProgress] = useState(false)\n  const [migrationStatus, setMigrationStatus] = useState(\"\")\n\n  const handleMigrationButton = async () => {\n    try {\n      setShowProgress(true)\n      const safeTxHash = await migrate(safeAddress, setMigrationStatus)\n      setTxLink(buildSafeTxLink(safeAddress, safeTxHash))\n    } catch (e) {\n      console.error(e)\n      setMigrationStatus(\"\" + e)\n    } finally {\n      setShowProgress(false)\n    }\n  }\n\n  const handleRevertButton = async () => {\n    try {\n      setShowProgress(true)\n      const safeTxHash = await revertMigration(safeAddress, setMigrationStatus)\n      setTxLink(buildSafeTxLink(safeAddress, safeTxHash))\n    } catch (e) {\n      console.error(e)\n      setMigrationStatus(\"\" + e)\n    } finally {\n      setShowProgress(false)\n    }\n  }\n\n  const handleAddressInput = async (address: string) => {\n    setSafeAddress(address)\n    setSafeStatus(undefined)\n    setTxLink(\"\")\n    setMigrationStatus(\"\")\n    try {\n      setShowProgress(true)\n      setSafeStatus(await loadSafeStatus(address))\n    } catch (e) {\n      console.error(e)\n    } finally {\n      setShowProgress(false)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Typography variant=\"h4\">Safe BSC Migrator</Typography>\n      <Typography variant=\"h6\">Motivation</Typography>\n      <Typography variant=\"body1\" maxWidth={800} padding={1}>\n        With this web app it is possible to migrate to and from a version of Safe that does not emit any events when receiving native BNB to work around an issue on <b>BSC</b> that would make it under certain conditions impossible to receive native BNB from another contract.\n      </Typography>\n      <Typography variant=\"body1\" maxWidth={800} padding={1}>\n        More information can be found in the <Link href=\"https://github.com/rmeissner/safe-migrator#safe-migrator\">repository</Link> of this project.\n      </Typography>\n      <Typography variant=\"h6\">Guide</Typography>\n      <Typography variant=\"body1\" maxWidth={800} padding={1}>\n        You require access to one of the owner wallets of the Safe that should be migrated.\n      </Typography>\n      <Typography variant=\"body1\" maxWidth={800} padding={1}>\n        Once an action has been triggered on the interface a Safe transaction hash needs to be signed. \n          Note: This step will NEVER trigger a transaction, therefore there is no need to own any BNB.\n      </Typography>\n      <Typography variant=\"body1\" maxWidth={800} padding={1}>\n        The transaction will be visible in the Gnosis Safe web interface and should be inspected before execution.\n      </Typography>\n      <Typography variant=\"h6\">Transaction Details</Typography>\n      <Typography variant=\"body1\" maxWidth={800} padding={1}>\n        The transaction triggered will use <b>delegate call</b> to interact with <Link href=\"https://www.bscscan.com/address/0x82b71f39d719cC971B80E7A7B6c0c2aF96a5abC1#code\">0x82b71f39d719cC971B80E7A7B6c0c2aF96a5abC1</Link> and contain <b>0 BNB</b> of value. It will call either the method <b>migrate</b> or <b>revertMigration</b>.\n      </Typography>\n      <Typography variant=\"body1\" maxWidth={800}>\n        <img src={txDetailsImg} alt=\"Transaction Details\" />\n      </Typography>\n      <Typography variant=\"caption\">Example transaction details</Typography>\n      <Typography variant=\"h6\">Actions</Typography>\n      <Typography variant=\"body1\" maxWidth={800}>\n        Enter Safe Address to get started!\n      </Typography>\n      <TextField value={safeAddress} onChange={(e) => handleAddressInput(e.target.value)} label=\"Safe Address\" />\n      <Container sx={{paddingTop: 4, textAlign: \"center\", maxWidth: 800, display: \"flex\", flexDirection: \"column\", alignItems: \"center\"}}>\n        {\n          !!migrationStatus && (\n            <Typography variant=\"body1\">\n              {migrationStatus}\n            </Typography>\n          )\n        }\n        {\n          showProgress && (<CircularProgress />)\n        }\n        { !!txLink && (\n          <Link href={txLink} target=\"_blank\">Show transaction in Safe interface</Link>\n        )}\n        { !txLink && !showProgress && safeStatus && !safeStatus.fixEnabled && (\n          <Button onClick={() => handleMigrationButton()}>Migrate To Workaround Version</Button>\n        )}\n        { !txLink && !showProgress && safeStatus && safeStatus.fixEnabled && (\n          <Button onClick={() => handleRevertButton()}>Migrate To Official Version</Button>\n        )}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}