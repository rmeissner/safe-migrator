{"version":3,"sources":["../node_modules/hdkey/node_modules/secp256k1/elliptic.js","../node_modules/hdkey/node_modules/secp256k1/lib/index.js","../node_modules/hdkey/node_modules/secp256k1/lib/elliptic.js","../node_modules/bs58check/index.js","../node_modules/base-x/src/index.js","../node_modules/bs58/index.js","../node_modules/bs58check/base.js","../node_modules/hdkey/lib/hdkey.js"],"names":["module","exports","require","errors","assert","cond","msg","Error","isUint8Array","name","value","length","Uint8Array","undefined","Array","isArray","numbers","join","includes","isCompressed","toTypeString","getAssertedOutput","output","len","Object","prototype","toString","call","slice","secp256k1","contextRandomize","seed","privateKeyVerify","seckey","privateKeyNegate","privateKeyTweakAdd","tweak","privateKeyTweakMul","publicKeyVerify","pubkey","publicKeyCreate","compressed","publicKeyConvert","publicKeyNegate","publicKeyCombine","pubkeys","publicKeyTweakAdd","publicKeyTweakMul","signatureNormalize","sig","signatureExport","obj","outputlen","signatureImport","ecdsaSign","msg32","options","data","noncefn","signature","recid","ecdsaVerify","ecdsaRecover","ecdh","hashfn","xbuf","ybuf","ec","EC","ecparams","curve","BN","n","constructor","loadPublicKey","first","x","cmp","p","y","toRed","red","redSqr","redIMul","redIAdd","b","redSqrt","isOdd","redNeg","keyPair","pub","loadCompressedPublicKey","subarray","x3","redISub","isZero","loadUncompressedPublicKey","savePublicKey","point","encode","i","bn","negate","sub","umod","toArrayLike","set","iadd","isub","tweaked","imul","keyFromPrivate","getPublic","pair","pairs","add","isInfinity","g","mul","r","s","nh","sigR","sigS","lenR","posR","lenS","posS","message","_noncefn","counter","nonce","d","sign","canonical","k","pers","err","recoveryParam","sigObj","sigr","sigs","verify","recoverPubKey","scalar","sha256","hash","update","digest","getX","toArray","getY","createHash","bs58checkBase","buffer","tmp","_Buffer","Buffer","ALPHABET","TypeError","BASE_MAP","j","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","Math","log","iFACTOR","decodeUnsafe","source","alloc","psz","zeroes","size","b256","carry","it3","it4","vch","allocUnsafe","fill","from","isBuffer","pbegin","pend","b58","it1","it2","str","repeat","decode","string","basex","base58","checksumFn","decodeRaw","payload","checksum","newChecksum","concat","crypto","bs58check","MASTER_SECRET","HARDENED_OFFSET","BITCOIN_VERSIONS","private","public","HDKey","versions","this","depth","index","_privateKey","_publicKey","chainCode","_fingerprint","parentFingerprint","serialize","hdkey","version","key","writeUInt32BE","writeUInt8","fingerprint","copy","hash160","buf","sha","defineProperty","get","_identifier","identifier","equal","publicKey","readUInt32BE","privateKey","derive","path","entries","split","forEach","c","hardened","childIndex","parseInt","deriveChild","test","isHardened","indexBuffer","pk","zb","I","createHmac","IL","IR","hd","wipePrivateData","randomBytes","toJSON","xpriv","privateExtendedKey","xpub","publicExtendedKey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","keyBuffer","readUInt8","fromJSON"],"mappings":"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","file":"static/js/8.629a0ed0.chunk.js","sourcesContent":["module.exports = require('./lib')(require('./lib/elliptic'))\n","const errors = {\n  IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',\n  TWEAK_ADD:\n    'The tweak was out of range or the resulted private key is invalid',\n  TWEAK_MUL: 'The tweak was out of range or equal to zero',\n  CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',\n  SECKEY_INVALID: 'Private Key is invalid',\n  PUBKEY_PARSE: 'Public Key could not be parsed',\n  PUBKEY_SERIALIZE: 'Public Key serialization error',\n  PUBKEY_COMBINE: 'The sum of the public keys is not valid',\n  SIG_PARSE: 'Signature could not be parsed',\n  SIGN: 'The nonce generation function failed, or the private key was invalid',\n  RECOVER: 'Public key could not be recover',\n  ECDH: 'Scalar was invalid (zero or overflow)'\n}\n\nfunction assert (cond, msg) {\n  if (!cond) throw new Error(msg)\n}\n\nfunction isUint8Array (name, value, length) {\n  assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`)\n\n  if (length !== undefined) {\n    if (Array.isArray(length)) {\n      const numbers = length.join(', ')\n      const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`\n      assert(length.includes(value.length), msg)\n    } else {\n      const msg = `Expected ${name} to be an Uint8Array with length ${length}`\n      assert(value.length === length, msg)\n    }\n  }\n}\n\nfunction isCompressed (value) {\n  assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean')\n}\n\nfunction getAssertedOutput (output = (len) => new Uint8Array(len), length) {\n  if (typeof output === 'function') output = output(length)\n  isUint8Array('output', output, length)\n  return output\n}\n\nfunction toTypeString (value) {\n  return Object.prototype.toString.call(value).slice(8, -1)\n}\n\nmodule.exports = (secp256k1) => {\n  return {\n    contextRandomize (seed) {\n      assert(\n        seed === null || seed instanceof Uint8Array,\n        'Expected seed to be an Uint8Array or null'\n      )\n      if (seed !== null) isUint8Array('seed', seed, 32)\n\n      switch (secp256k1.contextRandomize(seed)) {\n        case 1:\n          throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)\n      }\n    },\n\n    privateKeyVerify (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      return secp256k1.privateKeyVerify(seckey) === 0\n    },\n\n    privateKeyNegate (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      switch (secp256k1.privateKeyNegate(seckey)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    privateKeyTweakAdd (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    privateKeyTweakMul (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    publicKeyVerify (pubkey) {\n      isUint8Array('public key', pubkey, [33, 65])\n\n      return secp256k1.publicKeyVerify(pubkey) === 0\n    },\n\n    publicKeyCreate (seckey, compressed = true, output) {\n      isUint8Array('private key', seckey, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCreate(output, seckey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SECKEY_INVALID)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyConvert (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyConvert(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyNegate (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyNegate(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyCombine (pubkeys, compressed = true, output) {\n      assert(Array.isArray(pubkeys), 'Expected public keys to be an Array')\n      assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items')\n      for (const pubkey of pubkeys) {\n        isUint8Array('public key', pubkey, [33, 65])\n      }\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCombine(output, pubkeys)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_COMBINE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    publicKeyTweakMul (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    signatureNormalize (sig) {\n      isUint8Array('signature', sig, 64)\n\n      switch (secp256k1.signatureNormalize(sig)) {\n        case 0:\n          return sig\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n      }\n    },\n\n    signatureExport (sig, output) {\n      isUint8Array('signature', sig, 64)\n      output = getAssertedOutput(output, 72)\n\n      const obj = { output, outputlen: 72 }\n      switch (secp256k1.signatureExport(obj, sig)) {\n        case 0:\n          return output.slice(0, obj.outputlen)\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    signatureImport (sig, output) {\n      isUint8Array('signature', sig)\n      output = getAssertedOutput(output, 64)\n\n      switch (secp256k1.signatureImport(output, sig)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaSign (msg32, seckey, options = {}, output) {\n      isUint8Array('message', msg32, 32)\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function')\n      output = getAssertedOutput(output, 64)\n\n      const obj = { signature: output, recid: null }\n      switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {\n        case 0:\n          return obj\n        case 1:\n          throw new Error(errors.SIGN)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaVerify (sig, msg32, pubkey) {\n      isUint8Array('signature', sig, 64)\n      isUint8Array('message', msg32, 32)\n      isUint8Array('public key', pubkey, [33, 65])\n\n      switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {\n        case 0:\n          return true\n        case 3:\n          return false\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_PARSE)\n      }\n    },\n\n    ecdsaRecover (sig, recid, msg32, compressed = true, output) {\n      isUint8Array('signature', sig, 64)\n      assert(\n        toTypeString(recid) === 'Number' &&\n          recid >= 0 &&\n          recid <= 3,\n        'Expected recovery id to be a Number within interval [0, 3]'\n      )\n      isUint8Array('message', msg32, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.RECOVER)\n        case 3:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdh (pubkey, seckey, options = {}, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.hashfn !== undefined) {\n        assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function')\n        if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32)\n        if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32)\n        isUint8Array('output', output)\n      } else {\n        output = getAssertedOutput(output, 32)\n      }\n\n      switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.ECDH)\n      }\n    }\n  }\n}\n","const EC = require('elliptic').ec\n\nconst ec = new EC('secp256k1')\nconst ecparams = ec.curve\n\n// Hack, we can not use bn.js@5, while elliptic uses bn.js@4\n// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758\nconst BN = ecparams.n.constructor\n\nfunction loadCompressedPublicKey (first, xbuf) {\n  let x = new BN(xbuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xbuf, ybuf) {\n  let x = new BN(xbuf)\n  let y = new BN(ybuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  const x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (pubkey) {\n  // length should be validated in interface\n  const first = pubkey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (pubkey.length !== 33) return null\n      return loadCompressedPublicKey(first, pubkey.subarray(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (pubkey.length !== 65) return null\n      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))\n    default:\n      return null\n  }\n}\n\nfunction savePublicKey (output, point) {\n  const pubkey = point.encode(null, output.length === 33)\n  // Loop should be faster because we do not need create extra Uint8Array\n  // output.set(new Uint8Array(pubkey))\n  for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]\n}\n\nmodule.exports = {\n  contextRandomize () {\n    return 0\n  },\n\n  privateKeyVerify (seckey) {\n    const bn = new BN(seckey)\n    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1\n  },\n\n  privateKeyNegate (seckey) {\n    const bn = new BN(seckey)\n    const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(negate)\n    return 0\n  },\n\n  privateKeyTweakAdd (seckey, tweak) {\n    const bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0) return 1\n\n    bn.iadd(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n    if (bn.isZero()) return 1\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  privateKeyTweakMul (seckey, tweak) {\n    let bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    bn.imul(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  publicKeyVerify (pubkey) {\n    const pair = loadPublicKey(pubkey)\n    return pair === null ? 1 : 0\n  },\n\n  publicKeyCreate (output, seckey) {\n    const bn = new BN(seckey)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    const point = ec.keyFromPrivate(seckey).getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyConvert (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyNegate (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    point.y = point.y.redNeg()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyCombine (output, pubkeys) {\n    const pairs = new Array(pubkeys.length)\n    for (let i = 0; i < pubkeys.length; ++i) {\n      pairs[i] = loadPublicKey(pubkeys[i])\n      if (pairs[i] === null) return 1\n    }\n\n    let point = pairs[0].getPublic()\n    for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakAdd (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0) return 2\n\n    const point = pair.getPublic().add(ecparams.g.mul(tweak))\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakMul (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2\n\n    const point = pair.getPublic().mul(tweak)\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  signatureNormalize (sig) {\n    const r = new BN(sig.subarray(0, 32))\n    const s = new BN(sig.subarray(32, 64))\n    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1\n\n    if (s.cmp(ec.nh) === 1) {\n      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)\n    }\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureExport (obj, sig) {\n    const sigR = sig.subarray(0, 32)\n    const sigS = sig.subarray(32, 64)\n    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1\n    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1\n\n    const { output } = obj\n\n    // Prepare R\n    let r = output.subarray(4, 4 + 33)\n    r[0] = 0x00\n    r.set(sigR, 1)\n\n    let lenR = 33\n    let posR = 0\n    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n\n    r = r.subarray(posR)\n    if (r[0] & 0x80) return 1\n    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1\n\n    // Prepare S\n    let s = output.subarray(6 + 33, 6 + 33 + 33)\n    s[0] = 0x00\n    s.set(sigS, 1)\n\n    let lenS = 33\n    let posS = 0\n    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n\n    s = s.subarray(posS)\n    if (s[0] & 0x80) return 1\n    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1\n\n    // Set output length for return\n    obj.outputlen = 6 + lenR + lenS\n\n    // Output in specified format\n    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n    output[0] = 0x30\n    output[1] = obj.outputlen - 2\n    output[2] = 0x02\n    output[3] = r.length\n    output.set(r, 4)\n    output[4 + lenR] = 0x02\n    output[5 + lenR] = s.length\n    output.set(s, 6 + lenR)\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureImport (output, sig) {\n    if (sig.length < 8) return 1\n    if (sig.length > 72) return 1\n    if (sig[0] !== 0x30) return 1\n    if (sig[1] !== sig.length - 2) return 1\n    if (sig[2] !== 0x02) return 1\n\n    const lenR = sig[3]\n    if (lenR === 0) return 1\n    if (5 + lenR >= sig.length) return 1\n    if (sig[4 + lenR] !== 0x02) return 1\n\n    const lenS = sig[5 + lenR]\n    if (lenS === 0) return 1\n    if ((6 + lenR + lenS) !== sig.length) return 1\n\n    if (sig[4] & 0x80) return 1\n    if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1\n\n    if (sig[lenR + 6] & 0x80) return 1\n    if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1\n\n    let sigR = sig.subarray(4, 4 + lenR)\n    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)\n    if (sigR.length > 32) return 1\n\n    let sigS = sig.subarray(6 + lenR)\n    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)\n    if (sigS.length > 32) throw new Error('S length is too long')\n\n    let r = new BN(sigR)\n    if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n    let s = new BN(sig.subarray(6 + lenR))\n    if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)\n    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)\n\n    return 0\n  },\n\n  ecdsaSign (obj, message, seckey, data, noncefn) {\n    if (noncefn) {\n      const _noncefn = noncefn\n      noncefn = (counter) => {\n        const nonce = _noncefn(message, seckey, null, data, counter)\n\n        const isValid = nonce instanceof Uint8Array && nonce.length === 32\n        if (!isValid) throw new Error('This is the way')\n\n        return new BN(nonce)\n      }\n    }\n\n    const d = new BN(seckey)\n    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1\n\n    let sig\n    try {\n      sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data })\n    } catch (err) {\n      return 1\n    }\n\n    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)\n    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)\n    obj.recid = sig.recoveryParam\n\n    return 0\n  },\n\n  ecdsaVerify (sig, msg32, pubkey) {\n    const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3\n\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 2\n\n    const point = pair.getPublic()\n    const isValid = ec.verify(msg32, sigObj, point)\n    return isValid ? 0 : 3\n  },\n\n  ecdsaRecover (output, sig, recid, msg32) {\n    const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n\n    if (sigr.isZero() || sigs.isZero()) return 2\n\n    // Can throw `throw new Error('Unable to find sencond key candinate');`\n    let point\n    try {\n      point = ec.recoverPubKey(msg32, sigObj, recid)\n    } catch (err) {\n      return 2\n    }\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const scalar = new BN(seckey)\n    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2\n\n    const point = pair.getPublic().mul(scalar)\n\n    if (hashfn === undefined) {\n      const data = point.encode(null, true)\n      const sha256 = ec.hash().update(data).digest()\n      for (let i = 0; i < 32; ++i) output[i] = sha256[i]\n    } else {\n      if (!xbuf) xbuf = new Uint8Array(32)\n      const x = point.getX().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) xbuf[i] = x[i]\n\n      if (!ybuf) ybuf = new Uint8Array(32)\n      const y = point.getY().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) ybuf[i] = y[i]\n\n      const hash = hashfn(xbuf, ybuf, data)\n\n      const isValid = hash instanceof Uint8Array && hash.length === output.length\n      if (!isValid) return 2\n\n      output.set(hash)\n    }\n\n    return 0\n  }\n}\n","'use strict'\n\nvar createHash = require('create-hash')\nvar bs58checkBase = require('./base')\n\n// SHA256(SHA256(buffer))\nfunction sha256x2 (buffer) {\n  var tmp = createHash('sha256').update(buffer).digest()\n  return createHash('sha256').update(tmp).digest()\n}\n\nmodule.exports = bs58checkBase(sha256x2)\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n\nvar base58 = require('bs58')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var checksum = checksumFn(payload)\n\n    return base58.encode(Buffer.concat([\n      payload,\n      checksum\n    ], payload.length + 4))\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n","var assert = require('assert')\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = require('crypto')\nvar bs58check = require('bs58check')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = Buffer.from(secp256k1.publicKeyCreate(value, true))\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = Buffer.from(secp256k1.publicKeyConvert(value, true)) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = Buffer.alloc(1, 0)\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(this.privateKey), IL))\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(this.publicKey), IL, true))\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.sign = function (hash) {\n  return Buffer.from(secp256k1.ecdsaSign(hash, this.privateKey).signature)\n}\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.ecdsaVerify(\n    Uint8Array.from(signature),\n    Uint8Array.from(hash),\n    Uint8Array.from(this.publicKey)\n  )\n}\n\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) crypto.randomBytes(this._privateKey.length).copy(this._privateKey)\n  this._privateKey = null\n  return this\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = bs58check.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('ripemd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n"],"sourceRoot":""}